create table "public"."users_stats" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null,
    "stat_id" bigint not null,
    "units" integer not null,
    "notes" text
);


alter table "public"."users_stats" enable row level security;

CREATE UNIQUE INDEX users_stats_pkey ON public.users_stats USING btree (id);

alter table "public"."users_stats" add constraint "users_stats_pkey" PRIMARY KEY using index "users_stats_pkey";

alter table "public"."users_stats" add constraint "users_stats_stat_id_fkey" FOREIGN KEY (stat_id) REFERENCES stats(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."users_stats" validate constraint "users_stats_stat_id_fkey";

alter table "public"."users_stats" add constraint "users_stats_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."users_stats" validate constraint "users_stats_user_id_fkey";

grant delete on table "public"."users_stats" to "anon";

grant insert on table "public"."users_stats" to "anon";

grant references on table "public"."users_stats" to "anon";

grant select on table "public"."users_stats" to "anon";

grant trigger on table "public"."users_stats" to "anon";

grant truncate on table "public"."users_stats" to "anon";

grant update on table "public"."users_stats" to "anon";

grant delete on table "public"."users_stats" to "authenticated";

grant insert on table "public"."users_stats" to "authenticated";

grant references on table "public"."users_stats" to "authenticated";

grant select on table "public"."users_stats" to "authenticated";

grant trigger on table "public"."users_stats" to "authenticated";

grant truncate on table "public"."users_stats" to "authenticated";

grant update on table "public"."users_stats" to "authenticated";

grant delete on table "public"."users_stats" to "service_role";

grant insert on table "public"."users_stats" to "service_role";

grant references on table "public"."users_stats" to "service_role";

grant select on table "public"."users_stats" to "service_role";

grant trigger on table "public"."users_stats" to "service_role";

grant truncate on table "public"."users_stats" to "service_role";

grant update on table "public"."users_stats" to "service_role";

create policy "Enable insert for users based on user_id"
on "public"."users_stats"
as permissive
for insert
to authenticated
with check ((auth.uid() = user_id));


create policy "Read own stats"
on "public"."users_stats"
as permissive
for select
to authenticated
using ((auth.uid() = user_id));



